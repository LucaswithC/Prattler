
  /*******************************************************************
  * Posts.js
  * Generated by Backendless Corp.
  ********************************************************************/
		
   const Utils = {
    isObject : obj => obj === Object(obj),
    isString : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'String',
    isNumber : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Number',
    isBoolean: obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Boolean',
    isDate   : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Date'
  }
  
  Backendless.APIServices.Posts = {
    addPost(postInfo) {   
      if (!Utils.isObject(postInfo)) {
        throw new Error('Invalid value for argument "postInfo". Must be object value')
      }
      
      const args = postInfo
      return Backendless.APIServices.invoke('Posts', 'addPost', args)
    },
  
    removePost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'removePost', args)
    },
  
    getAll(filter) {   
      if (!Utils.isObject(filter)) {
        throw new Error('Invalid value for argument "filter". Must be object value')
      }
      
      const args = filter
      return Backendless.APIServices.invoke('Posts', 'getAll', args)
    },
  
    getFollowingPosts(filter) {   
      if (!Utils.isObject(filter)) {
        throw new Error('Invalid value for argument "filter". Must be object value')
      }
      
      const args = filter
      return Backendless.APIServices.invoke('Posts', 'getFollowingPosts', args)
    },
  
    getSinglePost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'getSinglePost', args)
    },
  
    addPostComment(feedId,postId,postInfo) {   
      if (!Utils.isString(feedId)) {
        throw new Error('Invalid value for argument "feedId". Must be string value')
      }
        
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
        
      if (!Utils.isObject(postInfo)) {
        throw new Error('Invalid value for argument "postInfo". Must be object value')
      }
      
      const args = {
        feedId: feedId,
          postId: postId,
          postInfo: postInfo
      }
        
      return Backendless.APIServices.invoke('Posts', 'addPostComment', args)
    },
  
    getPostComments(postId,filter) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
        
      if (!Utils.isObject(filter)) {
        throw new Error('Invalid value for argument "filter". Must be object value')
      }
      
      const args = {
        postId: postId,
          filter: filter
      }
        
      return Backendless.APIServices.invoke('Posts', 'getPostComments', args)
    },
  
    likePost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'likePost', args)
    },
  
    unlikePost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'unlikePost', args)
    },
  
    repost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'repost', args)
    },
  
    removeRepost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'removeRepost', args)
    },
  
    savePost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'savePost', args)
    },
  
    unsavePost(postId) {   
      if (!Utils.isString(postId)) {
        throw new Error('Invalid value for argument "postId". Must be string value')
      }
      
      const args = postId
      return Backendless.APIServices.invoke('Posts', 'unsavePost', args)
    },
  
    getSaved(filter) {   
      if (!Utils.isObject(filter)) {
        throw new Error('Invalid value for argument "filter". Must be object value')
      }
      
      const args = filter
      return Backendless.APIServices.invoke('Posts', 'getSaved', args)
    },
  
    trendingHashtags() { 
      const args = null
        
      return Backendless.APIServices.invoke('Posts', 'trendingHashtags', args)
    },
  
    getTags(tags) {   
      if (!Utils.isObject(tags)) {
        throw new Error('Invalid value for argument "tags". Must be object value')
      }
      
      const args = tags
      return Backendless.APIServices.invoke('Posts', 'getTags', args)
    }
  }
  