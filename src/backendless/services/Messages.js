
  /*******************************************************************
  * Messages.js
  * Generated by Backendless Corp.
  ********************************************************************/
		
const Utils = {
  isObject : obj => obj === Object(obj),
  isString : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'String',
  isNumber : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Number',
  isBoolean: obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Boolean',
  isDate   : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Date'
}

Backendless.APIServices.Messages = {
  postMessage(message,channelId) {   
    if (!Utils.isString(message)) {
      throw new Error('Invalid value for argument "message". Must be string value')
    }
      
    if (!Utils.isString(channelId)) {
      throw new Error('Invalid value for argument "channelId". Must be string value')
    }
    
    const args = {
      message: message,
        channelId: channelId
    }
      
    return Backendless.APIServices.invoke('Messages', 'postMessage', args)
  },

  getMessages(channelId,filters) {   
    if (!Utils.isString(channelId)) {
      throw new Error('Invalid value for argument "channelId". Must be string value')
    }
      
    if (!Utils.isObject(filters)) {
      throw new Error('Invalid value for argument "filters". Must be object value')
    }
    
    const args = {
      channelId: channelId,
        filters: filters
    }
      
    return Backendless.APIServices.invoke('Messages', 'getMessages', args)
  },

  getSingleMessage(messageId) {   
    if (!Utils.isString(messageId)) {
      throw new Error('Invalid value for argument "messageId". Must be string value')
    }
    
    const args = messageId
    return Backendless.APIServices.invoke('Messages', 'getSingleMessage', args)
  },

  getChannelName(channelId) {   
    if (!Utils.isString(channelId)) {
      throw new Error('Invalid value for argument "channelId". Must be string value')
    }
    
    const args = channelId
    return Backendless.APIServices.invoke('Messages', 'getChannelName', args)
  },

  getJoinedChannels(offset) { 
    if (!Utils.isNumber(offset)) {
      throw new Error('Invalid value for argument "offset". Must be number value')
    }

    const args = offset
      
    return Backendless.APIServices.invoke('Messages', 'getJoinedChannels', args)
  },

  getSearchedChannels(searchTerm) {   
    if (!Utils.isString(searchTerm)) {
      throw new Error('Invalid value for argument "searchTerm". Must be string value')
    }
    
    const args = searchTerm
    return Backendless.APIServices.invoke('Messages', 'getSearchedChannels', args)
  },

  joinChannel(channelId) {   
    if (!Utils.isString(channelId)) {
      throw new Error('Invalid value for argument "channelId". Must be string value')
    }
    
    const args = channelId
    return Backendless.APIServices.invoke('Messages', 'joinChannel', args)
  },

  leaveChannel(channelId) {   
    if (!Utils.isString(channelId)) {
      throw new Error('Invalid value for argument "channelId". Must be string value')
    }
    
    const args = channelId
    return Backendless.APIServices.invoke('Messages', 'leaveChannel', args)
  },

  getChannelMembers(channelId,offset) {   
    if (!Utils.isString(channelId)) {
      throw new Error('Invalid value for argument "channelId". Must be string value')
    }
      if (typeof offset !== 'number') {
        throw new Error('Invalid value for argument "offset". Must be an number object')
      }
      
    const args = {
      channelId: channelId,
        offset: offset
    }
      
    return Backendless.APIServices.invoke('Messages', 'getChannelMembers', args)
  },

  createChannel(name,description) {   
    if (!Utils.isString(name)) {
      throw new Error('Invalid value for argument "name". Must be string value')
    }
      
    if (!Utils.isString(description)) {
      throw new Error('Invalid value for argument "description". Must be string value')
    }
    
    const args = {
      name: name,
        description: description
    }
      
    return Backendless.APIServices.invoke('Messages', 'createChannel', args)
  }
}
